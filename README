his file documents the contents of this module

See the devel/ subdir for more devel-oriented doc.

==================== 1 minute howto

*  REQUIREMENTS  is to have python + django installed django
** should be straightforward
** see devel/django-install.txt in case of trouble

* git clone git://git.onelab.eu/myslice-django.git
-- or --
* git clone ssh://yourlogin@git.onelab.eu/git/myslice-django.git

* edit myslice/settings.py and
** change DEVELOPER_ROOT if you didnt clone into ~/git/myslice-django
** change the location of your backend API (not yet supported)

* edit myslice/config.py and enter the details of your manifold backend

* init django
$ manage.py syncdb

* gather static files
$ make static

* run a local server:
$ manage.py runserver 0.0.0.0:8000
-- or -- my advice:
$ devel/server-loop.sh
when you just need to hit ^C yourself when your static files need to be refreshed - see below

* use it from your browser 
(See more notes on using the development server below)

==================== Status

*** Authentication ***

Although there still are a few hard-coded accounts in the system, you
will only be able to see some static views and won't be able to send
real queries if you use these, so you'd better use a real account (one
that your manifold backend knows about).

For logging out: click on 'logged as *jean*', this shows a
confirmation page for logging out. this is intended to be temporary.

*** Packaging ***

I've done a very rough attempt at packaging for rpm.
The logic seems about right but needs more work, in particular in terms of installing myslice.conf
in the httpd conf.d directory. 
It seems like our app won't work on f14 as is because Django is only 1.3.1 on f14
Plan is to target f18 but I lack a test machine.
Also of course I'll try to tackle debian/ubunti at some point.

*** Features ***

We have a basic model for asynchroneous queries (referring to manifold
queries) and for plugins (in the most general sense a plugin is just a
piece of the output that may be connected to a query)

Right now the UI has a handful of demo views only; as of this writing
only the list of slices actually comes from the manifold backend in an
asynchroneous way.

Also all the views are gathered in the trash/ locations for now, being
that they're only for assessment purposes.

* dahsboard : has one async. query and 2 plugins that share that
  query; the intent was to demo a different layout in both cases,
  although the datatables one won't work yet at this point.

* the 'Plugin' view demonstrates most of the available plugins.

* slice view : only demonstrates how to use URLs to pass arguments along

* scroll view : mostly it only illustrates that some pages can be made
  public (no need to login)

* tab view : a hand-made tab widget

Not much effort has yet been put into coming up with a nice layout,
feel free to tweak that but it's probably still way too early for
this.

==================== 

Third party tools shipped:

* jquery
* datatables
* spin
* bootstrap

I've tried to keep track of the version I picked and to have an easy upgrade path.

==================== Contents: 1st level subdirs

========== code from git
* myslice: 
  this is the django 'project', where to look for
  . settings.py
  . urls.py

* manifold:
  the code for dealing with queries, sending them to the backend, and offering the /manifold/proxy/ URL

* unfold:
  the code for building / rendering plugins 

* plugins:
  the actual code for plugins

* auth: 
  a django 'app' that deals with authentication; see especially
  auth.backend.MyCustomBackend 
  for how to use a separate authentication system, 
  as well as settings.py for how to enable it

* trash/
  rough/preliminary views in here - as the name suggests this is temporary

* views/
  will receive actual views over time 
  currently has some global html templates as well
  + some global static files (css, js, images..)

* insert_above: 
  a third-party django app for adding on-the-fly mentions to css or js files that need to go in the header

* third-party/
   * third party javascript and css stuff (bootstrapfs, jquery, this kind of things)
     see more about that below too

* devel:
  no code in there, only various notes and other scripts useful for developers

========== automatically generated 

* all-static: (generated, no need to source-control)
  this is where 'make static' will gather all your static contents if you run a local server
  make has convenience targets to refresh this area
  $ make static 
  $ make clean-static 

* myslice.sqlite3
  this is where django stores its own stuff, as per settings.py

==================== conventions for templates & static files
==================== and NOTES on using the development server

. first off, running manage.py runserver is provided by django as a development convenience but
  SHOULD NOT be used in production

. second, when you do use it for developement purposes, please be aware that:

.. the recommended layout for the various files and pieces (py, html, js and css) with django is
   IMHO really painful; we *SHOULD* use e.g. 
      plugins/simplelist.py, 
      plugins/templates/plugins.html,
      plugins/static/js/simplelist.js 
      plugins/static/css/simplelist.css
   which I have tried doing for a while but I found mmyself just hopping around in the file tree all
   day long, wasting cycles all along

.. as that does not make sense IMHO, I've rewritten the tool for gathering these pieces (this is in
   the Makefile). Bottom line is we can essentially store this wherever we want.
   The only restriction being that if you have a template that is *not* html, then it *has to* sit
   in a templates/ directory, otherwise it gets shipped as a static file.  

.. as a result, we can now store all the files building a plugin in a single (git) directory; like e.g.
      plugins/quickfilter/quickfilter.py
      plugins/quickfilter/quickfilter.html
      plugins/quickfilter/quickfilter.js
      plugins/quickfilter/quickfilter.css

   Of course it's a completely different matter once the service is packaged and installed, these
   files of course get properly separated.

.. as a result it is a little bit less convenient to use the development server when you change the
   layout of your static and template files, you might need to re-run 'make static', so it is
   recommended to use devel/server-loop.sh instead


All this being said, here are our current conventions for storing templates and static files

* templates:
  we store this under templates/ within the corresponding app, e.g.
     auth/templates/login.html
  for now this is mostly about html, but the engine can be used for rendering anything 
  including js(on) or whatever (in which case, as stated above, this *must* have /templates/ in its path.

* static files:
  we chose to have all static files (images, but also javascript and stylesheets) in the various
  proj or app where they belong, with a layout like:
  where-it-belongs/
      img/
      css/
      js/
  Honestly it's not yet very clear sometimes what 'where-it-belongs' should be sometimes, and it
  does not matter too much anyway, given that the code doesn't need to change when we move things
  around. So in particular it's fuzzy between myslice/ (where the logo could fit e.g.) views/ and
  even trash/

Makefile has a few convenience targets to list all kinds of stuff; the 2 major targets are 

$ make static templates

that would reset all-static/ and all-templates/ for you from the other contents

* third-party
  please note that the set of files that actually get exposed in all-static from third-party is
  hand-coded in Makefile because we tried to preserve the original codebase layout from mainstream,
  and there's only so much in common between 2 differents js libraries at this point.



