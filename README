This file documents the contents of this module

Last update 4 sept. 2013

See the devel/ subdir for more devel-oriented doc.

==================== 1 minute howto

*  REQUIREMENTS  is to have python + django (1.5.2) installed django
** should be straightforward
** see devel/django-install.txt in case of trouble

* git clone git://git.onelab.eu/myslice.git
-- or --
* git clone ssh://yourlogin@git.onelab.eu/git/myslice.git

* edit myslice/config.py and enter the details of your manifold backend

* init django
$ manage.py syncdb

* gather static files
$ ./manage.py collectstatic (formerly, we used make static, which is deprecated)
-- or --
$ ./manage.py collectstatic --noinput
$ make 

* run a local server:
$ manage.py runserver 0.0.0.0:8000
-- or -- my advice:
$ devel/server-loop.sh
when you just need to hit ^C yourself when your static files need to be refreshed - see below

* use it from your browser 
(See more notes on using the development server below)

* install dependencies 
$ pip install -r path/to/requirements/file.txt
Note. not quite sure what this is about, I could not spot this file..

==================== Status

*** Authentication ***

Should be mostly fine
Not quite sure if/how the user gets proper notifications when
. his session has expired (i.e. his frontend is not logged into the backend any longer)
. his credentials have expired (i.e. the uploaded credentials, e.g. SFA delegated cred)
  expired and she needs to run e.g. sfi myslice again

Hard-coded accounts (from a very early stage) are gone


*** Packaging ***

I've done a very rough attempt at packaging for rpm.
The logic seems about right but needs more work, in particular in terms of installing myslice.conf
in the httpd conf.d directory. 
It seems like our app won't work on f14 as is because Django is only 1.3.1 on f14
Plan is to target f18 but I lack a test machine.
Also of course I'll try to tackle debian/ubunti at some point.

There also is a working packaging for debian(s) and ubuntu(s) that we use 
on an almost daily basis to upgrade manifold.pl.sophia.inria.fr


==================== 

Third party tools shipped:

* jquery
* datatables
* spin
* bootstrap

Others are added as we build the system when they become needed
Look in third-party/ for a more detailed list

As a rule of thumb, please try to keep in mind that these will need to
be upgraded over time I've tried to keep track of the version I picked
and to have an easy upgrade path (depending on the way the original
package is published)

==================== Contents: 1st level subdirs

========== code from git

* myslice/
  this is the django 'project', where to look for
  . settings.py
  . urls.py

* manifold/
  the code for dealing with queries, sending them to the backend, and offering the /manifold/proxy/ URL

* unfold/
  the code for building / rendering plugins 

* plugins/
  the actual code for plugins

* auth/ 
  a django 'app' that deals with authentication; see especially
  auth.backend.MyCustomBackend 
  for how to use a separate authentication system, 
  as well as settings.py for how to enable it

* portal/
  this is where the first implementation of myslice, with complete
  user-management including registration, is taking place

* trash/
  rough/preliminary scaffolding views are in here
  as the name suggests this is temporary

* views/
  will receive actual views over time 
  currently has some global html templates as well
  + some global static files (css, js, images..)

* insert_above: 
  a third-party django app for adding on-the-fly mentions to css or js files that need to go in the header

* third-party/
   * third party javascript and css stuff (bootstrapfs, jquery, this kind of things)
     see more about that below too

* devel:
  no code in there, only various notes and other scripts useful for developers

========== automatically generated 

* all-static: (generated, no need to source-control)
  this is where 'make static' will gather all your static contents if you run a local server
  make has convenience targets to refresh this area
  $ make static 
  $ make clean-static 

* django-static

* myslice.sqlite3
  this is where django stores its own stuff, as per settings.py

==================== conventions for templates & static files
==================== and NOTES on using the development server

. first off, running manage.py runserver is provided by django as a development convenience but
  SHOULD NOT be used in production

. second, when you do use it for developement purposes, please be aware that:

.. the recommended layout for the various files and pieces (py, html, js and css) with django is
   IMHO really painful; we *SHOULD* use e.g. 
      plugins/simplelist.py, 
      plugins/templates/plugins.html,
      plugins/static/js/simplelist.js 
      plugins/static/css/simplelist.css
   which I have tried doing for a while but I found myself just hopping around in the file tree all
   day long, wasting cycles big time

.. as that does not make sense IMHO, I've rewritten the tool for gathering these pieces (this is in
   the Makefile). Bottom line is we can essentially store this wherever we want.
   The only restriction being that if you have a template that is *not* html, then it *has to* sit
   in a templates/ directory, otherwise it gets shipped as a static file.  

.. as a result, we can now store all the files building a plugin in a single (git) directory; like e.g.
      plugins/quickfilter/quickfilter.py
      plugins/quickfilter/quickfilter.html
      plugins/quickfilter/quickfilter.js
      plugins/quickfilter/quickfilter.css

   Of course it's a completely different matter once the service is packaged and installed, these
   files of course get properly separated.

.. as a result it is a little bit less convenient to use the development server when you change the
   layout of your static and template files, you might need to re-run 'make static', so it is
   recommended to use devel/server-loop.sh instead


All this being said, here are our current conventions for storing templates and static files

* templates:
  we store this under templates/ within the corresponding app, e.g.
     auth/templates/login.html
  for now this is mostly about html, but the engine can be used for rendering anything 
  including js(on) or whatever (in which case, as stated above, this *must* have /templates/ in its path.

* static files:
  we chose to have all static files (images, but also javascript and stylesheets) in the various
  proj or app where they belong, with a layout like:
  where-it-belongs/
      img/
      css/
      js/
  Honestly it's not yet very clear sometimes what 'where-it-belongs' should be sometimes, and it
  does not matter too much anyway, given that the code doesn't need to change when we move things
  around. So in particular it's fuzzy between myslice/ (where the logo could fit e.g.) views/ and
  even trash/

Makefile has a few convenience targets to list all kinds of stuff; the 2 major targets are 

$ make static templates

that would reset all-static/ and all-templates/ for you from the other contents

* third-party
  please note that the set of files that actually get exposed in all-static from third-party is
  hand-coded in Makefile because we tried to preserve the original codebase layout from mainstream,
  and there's only so much in common between 2 differents js libraries at this point.



======== update django database to reflect changes in existing models without any migration system (e.g., south) =========

# older version
$python manage.py reset <your_app>

#Django 1.5.1 or later
$python manage.py flush

This will update the database tables for your app, but will completely destroy any data that existed in those tables. 
If the changes you made to your app model do not break your old schema (for instance, you added a new, optional field) 
you can simply dump the data before and reload it afterwards, like so:

$python manage.py syncdb
$python manage.py dumpdata <your_app> > temp_data.json
$python manage.py flush
$python manage.py loaddata temp_data.json

If your changes break your old schema this won't work - in which case tools like south or django evolution are great.

======== update django database to reflect changes in existing models with migration system (e.g., south) =========

As south is already installed , you just have to do:

$./manage.py migrate

if it fails:

1. go to myslice directory
2. do sqlite3 myslice.sqlite3 [if sqlite3: command not found, do $apt-get install sqlite3]
3. check the list of tables with sqlite> .tables
4. if you find those tables that was mentioned in the failure message while running $./manage.py migrate
	do sqlite> DROP TABLE mentioned_table 
	[mentioned_table = the tables that was explicity mentioned in the failure message of $./manage.py migrate]
5. sqlite> .quit
6. $./manage.py migrate  




